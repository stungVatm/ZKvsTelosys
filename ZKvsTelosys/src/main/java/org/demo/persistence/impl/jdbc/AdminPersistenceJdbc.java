/*
 * Created on 2019-06-28 ( Date ISO 2019-06-28 - Time 08:07:42 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.persistence.impl.jdbc;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.inject.Named;


import org.demo.data.record.AdminRecord ;
import org.demo.persistence.AdminPersistence;
import org.demo.persistence.impl.jdbc.commons.GenericJdbcDAO;

/**
 * Admin persistence implementation 
 * 
 * @author Telosys
 *
 */
@Named("AdminPersistence")
public class AdminPersistenceJdbc extends GenericJdbcDAO<AdminRecord> implements AdminPersistence {

	private final static String SQL_SELECT_ALL = 
		"select id, nameAd, userAd, passAd from admin"; 

	private final static String SQL_SELECT = 
		"select id, nameAd, userAd, passAd from admin where id = ?";

	private final static String SQL_INSERT = 
		"insert into admin ( nameAd, userAd, passAd ) values ( ?, ?, ? )";

	private final static String SQL_UPDATE = 
		"update admin set nameAd = ?, userAd = ?, passAd = ? where id = ?";

	private final static String SQL_DELETE = 
		"delete from admin where id = ?";

	private final static String SQL_COUNT_ALL = 
		"select count(*) from admin";

	private final static String SQL_COUNT = 
		"select count(*) from admin where id = ?";

    //----------------------------------------------------------------------
	/**
	 * DAO constructor
	 */
	public AdminPersistenceJdbc() {
		super();
	}

    //----------------------------------------------------------------------
	@Override
	protected void setAutoIncrementedKey(AdminRecord record, long value) {
		record.setId((Integer)((int)value));
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForPrimaryKey(PreparedStatement ps, int i, AdminRecord admin) throws SQLException {
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, admin.getId() ) ; // "id" : java.lang.Integer
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForInsert(PreparedStatement ps, int i, AdminRecord admin) throws SQLException {
		//--- Set PRIMARY KEY and DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		// "id" is auto-incremented => no set in insert		
		setValue(ps, i++, admin.getNamead() ) ; // "nameAd" : java.lang.String
		setValue(ps, i++, admin.getUserad() ) ; // "userAd" : java.lang.String
		setValue(ps, i++, admin.getPassad() ) ; // "passAd" : java.lang.String
	}

    //----------------------------------------------------------------------
	@Override
	protected void setValuesForUpdate(PreparedStatement ps, int i, AdminRecord admin) throws SQLException {
		//--- Set DATA from bean to PreparedStatement ( SQL "SET x=?, y=?, ..." )
		setValue(ps, i++, admin.getNamead() ) ; // "nameAd" : java.lang.String
		setValue(ps, i++, admin.getUserad() ) ; // "userAd" : java.lang.String
		setValue(ps, i++, admin.getPassad() ) ; // "passAd" : java.lang.String
		//--- Set PRIMARY KEY from bean to PreparedStatement ( SQL "WHERE key=?, ..." )
		setValue(ps, i++, admin.getId() ) ; // "id" : java.lang.Integer
	}

	//----------------------------------------------------------------------
	/**
	 * Creates a new instance of the bean and populates it with the given primary value(s)
	 * @param id;
	 * @return the new instance
	 */
	private AdminRecord newInstanceWithPrimaryKey( Integer id ) {
		AdminRecord admin = new AdminRecord();
		admin.setId( id );
		return admin ;
	}

	//----------------------------------------------------------------------
	@Override
	protected AdminRecord newInstance() {
		return new AdminRecord() ;
	}

    //----------------------------------------------------------------------
	@Override
	protected AdminRecord populateBean(ResultSet rs, AdminRecord admin) throws SQLException {

		//--- Set data from ResultSet to Bean attributes
		admin.setId(rs.getInt("id")); // java.lang.Integer
		if ( rs.wasNull() ) { admin.setId(null); }; // not primitive number => keep null value if any
		admin.setNamead(rs.getString("nameAd")); // java.lang.String
		admin.setUserad(rs.getString("userAd")); // java.lang.String
		admin.setPassad(rs.getString("passAd")); // java.lang.String
		return admin ;
	}

	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public AdminRecord findById( Integer id ) {
		AdminRecord admin = newInstanceWithPrimaryKey( id ) ;
		if ( super.doSelect(admin) ) {
			return admin ;
		}
		else {
			return null ; // Not found
		}
	}
	//----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public List<AdminRecord> findAll() {
		return super.doSelectAll();
	}

	//----------------------------------------------------------------------
	/**
	 * Loads the given bean, it is supposed to contains the primary key value(s) in its attribute(s)<br>
	 * If found, the given instance is populated with the values retrieved from the database<br>
	 * If not found, the given instance remains unchanged
	 * @param admin
	 * @return true if found, false if not found
	 */
	//@Override
	public boolean load( AdminRecord admin ) {
		return super.doSelect(admin) ;
	}

    //----------------------------------------------------------------------
	/**
	 * Inserts the given bean in the database 
	 * @param admin
	 */
	public long insert(AdminRecord admin) {
		Long key = super.doInsertAutoIncr(admin);
		return key.longValue();
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public AdminRecord create(AdminRecord admin) {
		insert(admin);
		return admin ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public boolean update(AdminRecord admin) {
		int r = super.doUpdate(admin);
		return r > 0 ;

	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public AdminRecord save(AdminRecord admin) {
		if ( super.doExists(admin) ) {
			super.doUpdate(admin);
		}
		else {
			super.doInsert(admin);
		}
		return admin ;
	}	

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public boolean deleteById( Integer id ) {
		AdminRecord admin = newInstanceWithPrimaryKey( id ) ;
		int r = super.doDelete(admin);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/* (non-Javadoc)
	 * @see interface 
	 */
	public boolean delete( AdminRecord admin ) {
		int r = super.doDelete(admin);
		return r > 0 ;
	}

    //----------------------------------------------------------------------
	/**
	 * Checks the existence of a record in the database using the given primary key value(s)
	 * @param id;
	 * @return
	 */
	// @Override
	public boolean exists( Integer id ) {
		AdminRecord admin = newInstanceWithPrimaryKey( id ) ;
		return super.doExists(admin);
	}
    //----------------------------------------------------------------------
	/**
	 * Checks the existence of the given bean in the database 
	 * @param admin
	 * @return
	 */
	// @Override
	public boolean exists( AdminRecord admin ) {
		return super.doExists(admin);
	}

    //----------------------------------------------------------------------
	/**
	 * Counts all the records present in the database
	 * @return
	 */
	public long countAll() {
		return super.doCountAll();
	}

    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelect() {
		return SQL_SELECT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlSelectAll() {
		return SQL_SELECT_ALL;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlInsert() {
		return SQL_INSERT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlUpdate() {
		return SQL_UPDATE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlDelete() {
		return SQL_DELETE ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCount() {
		return SQL_COUNT ;
	}
    //----------------------------------------------------------------------
	@Override
	protected String getSqlCountAll() {
		return SQL_COUNT_ALL ;
	}

}
