/*
 * Created on 2019-06-28 ( Date ISO 2019-06-28 - Time 08:07:06 )
 * Generated by Telosys ( http://www.telosys.org/ ) version 3.0.0
 */

package org.demo.data.record;

import java.io.Serializable;
import java.sql.Date;
import java.text.DecimalFormat;
import java.util.LinkedList;
import java.util.List;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;

import org.demo.persistence.impl.jdbc.ScoresPersistenceJdbc;
import org.demo.persistence.impl.jdbc.SubjectsPersistenceJdbc;

/**
 * Java bean for entity "students" <br>
 * Contains only "wrapper types" (no primitive types) <br>
 * Can be used both as a "web form" and "persistence record" <br>
 * 
 * @author Telosys Tools Generator
 *
 */
public class StudentsRecord implements Serializable {
	private static final long serialVersionUID = 1L;

	@NotNull
	private Integer id; // Integer // Id or Primary Key

	@Size(max = 50)
	private String namest; // String
	@Size(max = 50)
	private String codest; // String

	private Integer classid; // Integer

	private Integer age; // Integer
	@Size(max = 50)
	private String address; // String
	@Size(max = 50)
	private String phone; // String
	@Size(max = 50)
	private String email; // String
	@Size(max = 50)
	private String note; // String
	@Size(max = 255)
	private Date birthday; // String

	/**
	 * Default constructor
	 */
	public StudentsRecord() {
		super();
	}

	// ----------------------------------------------------------------------
	// GETTER(S) & SETTER(S) FOR ID OR PRIMARY KEY
	// ----------------------------------------------------------------------
	/**
	 * Set the "id" field value This field is mapped on the database column "id" (
	 * type "INT", NotNull : true )
	 * 
	 * @param id
	 */
	public void setId(Integer id) {
		this.id = id;
	}

	/**
	 * Get the "id" field value This field is mapped on the database column "id" (
	 * type "INT", NotNull : true )
	 * 
	 * @return the field value
	 */
	public Integer getId() {
		return this.id;
	}

	// ----------------------------------------------------------------------
	// GETTER(S) & SETTER(S) FOR OTHER DATA FIELDS
	// ----------------------------------------------------------------------

	/**
	 * Set the "namest" field value This field is mapped on the database column
	 * "nameSt" ( type "VARCHAR", NotNull : false )
	 * 
	 * @param namest
	 */
	public void setNamest(String namest) {
		this.namest = namest;
	}

	/**
	 * Get the "namest" field value This field is mapped on the database column
	 * "nameSt" ( type "VARCHAR", NotNull : false )
	 * 
	 * @return the field value
	 */
	public String getNamest() {
		return this.namest;
	}

	/**
	 * Set the "codest" field value This field is mapped on the database column
	 * "codeSt" ( type "VARCHAR", NotNull : false )
	 * 
	 * @param codest
	 */
	public void setCodest(String codest) {
		this.codest = codest;
	}

	/**
	 * Get the "codest" field value This field is mapped on the database column
	 * "codeSt" ( type "VARCHAR", NotNull : false )
	 * 
	 * @return the field value
	 */
	public String getCodest() {
		return this.codest;
	}

	/**
	 * Set the "classid" field value This field is mapped on the database column
	 * "classId" ( type "INT", NotNull : false )
	 * 
	 * @param classid
	 */
	public void setClassid(Integer classid) {
		this.classid = classid;
	}

	/**
	 * Get the "classid" field value This field is mapped on the database column
	 * "classId" ( type "INT", NotNull : false )
	 * 
	 * @return the field value
	 */
	public Integer getClassid() {
		return this.classid;
	}

	/**
	 * Set the "age" field value This field is mapped on the database column "age" (
	 * type "INT", NotNull : false )
	 * 
	 * @param age
	 */
	public void setAge(Integer age) {
		this.age = age;
	}

	/**
	 * Get the "age" field value This field is mapped on the database column "age" (
	 * type "INT", NotNull : false )
	 * 
	 * @return the field value
	 */
	public Integer getAge() {
		return this.age;
	}

	/**
	 * Set the "address" field value This field is mapped on the database column
	 * "address" ( type "VARCHAR", NotNull : false )
	 * 
	 * @param address
	 */
	public void setAddress(String address) {
		this.address = address;
	}

	/**
	 * Get the "address" field value This field is mapped on the database column
	 * "address" ( type "VARCHAR", NotNull : false )
	 * 
	 * @return the field value
	 */
	public String getAddress() {
		return this.address;
	}

	/**
	 * Set the "phone" field value This field is mapped on the database column
	 * "phone" ( type "VARCHAR", NotNull : false )
	 * 
	 * @param phone
	 */
	public void setPhone(String phone) {
		this.phone = phone;
	}

	/**
	 * Get the "phone" field value This field is mapped on the database column
	 * "phone" ( type "VARCHAR", NotNull : false )
	 * 
	 * @return the field value
	 */
	public String getPhone() {
		return this.phone;
	}

	/**
	 * Set the "email" field value This field is mapped on the database column
	 * "email" ( type "VARCHAR", NotNull : false )
	 * 
	 * @param email
	 */
	public void setEmail(String email) {
		this.email = email;
	}

	/**
	 * Get the "email" field value This field is mapped on the database column
	 * "email" ( type "VARCHAR", NotNull : false )
	 * 
	 * @return the field value
	 */
	public String getEmail() {
		return this.email;
	}

	/**
	 * Set the "note" field value This field is mapped on the database column "note"
	 * ( type "VARCHAR", NotNull : false )
	 * 
	 * @param note
	 */
	public void setNote(String note) {
		this.note = note;
	}

	/**
	 * Get the "note" field value This field is mapped on the database column "note"
	 * ( type "VARCHAR", NotNull : false )
	 * 
	 * @return the field value
	 */
	public String getNote() {
		return this.note;
	}

	/**
	 * Set the "test" field value This field is mapped on the database column "test"
	 * ( type "VARCHAR", NotNull : false )
	 * 
	 * @param test
	 */

	// ----------------------------------------------------------------------
	// toString METHOD
	// ----------------------------------------------------------------------
	@Override
	public String toString() {
		StringBuffer sb = new StringBuffer();
		sb.append(id);
		sb.append("|");
		sb.append(namest);
		sb.append("|");
		sb.append(codest);
		sb.append("|");
		sb.append(classid);
		sb.append("|");
		sb.append(age);
		sb.append("|");
		sb.append(address);
		sb.append("|");
		sb.append(phone);
		sb.append("|");
		sb.append(email);
		sb.append("|");
		sb.append(note);
		sb.append("|");
		sb.append(birthday);
		return sb.toString();
	}

	public Date getBirthday() {
		return birthday;
	}

	public void setBirthday(Date birthday) {
		this.birthday = birthday;
	}

	// Viet them
	private ScoresPersistenceJdbc scrPerJDBC = new ScoresPersistenceJdbc();
	private SubjectsPersistenceJdbc subPerJDBC = new SubjectsPersistenceJdbc();
	List<ScoresRecord> lstScore = new LinkedList<ScoresRecord>();

	public String getRank() {
		Double avgScore = this.getAvgScore();
		if (avgScore > 8.5) {
			return "top";
		} else if (avgScore > 6.5) {
			return "Medium";
		} else {
			return "Buttom";
		}
	}

	public double getAvgScore() {
		double totalScore = 0.0;
		int totalFactor = 0;
		lstScore = scrPerJDBC.findByStudentID(this.getId());
		for (ScoresRecord t : lstScore) {
			double Score = t.getScore();
			int Factor = subPerJDBC.findById(t.getSubjectid()).getFactor();
			totalScore += Score * Factor;
			totalFactor += Factor;
		}
		double result = totalScore / totalFactor;
//		DecimalFormat df = new DecimalFormat("#.000");
		return result;
	}

	public Double getBestScore() {
		lstScore = scrPerJDBC.findByStudentID(this.getId());
		Double maxScore = 0.0;
		for (ScoresRecord scoRc : lstScore) {
			if (scoRc.getScore() > maxScore) {
				maxScore = scoRc.getScore();
			}
		}
		return maxScore;
	}

	public List<SubjectsRecord> getBestSub() {
		List<SubjectsRecord> lstBestSub = new LinkedList<SubjectsRecord>();
		for (ScoresRecord scoRc : lstScore) {
			if (scoRc.getScore().compareTo(getBestScore()) == 0) {
				lstBestSub.add(subPerJDBC.findById(scoRc.getSubjectid()));
			}
		}
		return lstBestSub;
	}

}
